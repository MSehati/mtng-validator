/*! mtng-validator - V0.0.1 - 2015-01-05 - Morteza Tavanarad <tavanarad@gmail.com>*/!function(){"use strict";angular.module("mtng.validator",["mtng.validator.services","mtng.validator.directives"]),angular.module("mtng.validator.services",[]),angular.module("mtng.validator.directives",[])}(),function(){"use strict";function a(){var a={};return a.required="This field is required.",a.min="This field must be greater than {0}",a.max="This field must be less than {0}",a.minLength="This field must be at least {0} character(s)",a.maxLength="This field not should be more than {0} character(s)",a.email="This field must be a valid email address",a.digit="This field must be digit",a.number="This field must be number",a.pattern="This field is not valid",a.valid="This field is valid",a.notValid="This field is not valid",a}angular.module("mtng.validator.services").factory("MTNGMessageProvider",a)}(),function(){"use strict";function a(){function a(){function a(a,b){k[a]=b}function b(a){return a?!0:!1}function c(a){return a?a.length>=k.minLength:void 0}function d(a){return a?a.length<=k.maxLength:void 0}function e(a){return a?a>=k.min:void 0}function f(a){return a?a<=k.max:void 0}function g(a){return a?k.pattern.test(a):void 0}function h(a){if(a){var b=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");return b.test(a)}}function i(a){if(a){var b=/^\d+$/g;return b.test(a)}}function j(a){if(a){var b=/^\d+(\.\d+)?$/;return b.test(a)}}var k={};this.messages={},this.addRule=a,this.required=b,this.minLength=c,this.maxLength=d,this.min=e,this.max=f,this.pattern=g,this.email=h,this.number=j,this.digit=i}return a}angular.module("mtng.validator.services").factory("MTNGValidatorsProvider",a)}(),function(){"use strict";function a(a,b){function c(c,d,e,f){function g(a,c){"object"==typeof a?(c in a&&m.addRule(c,a[c]),"customValidator"in a?f.$validators[c]=a.customValidator:c in m&&(f.$validators[c]=m[c]),m.messages[c+"_failed"]="failedMessage"in a?a.failedMessage:c in b?b[c]:b.notValid,m.messages[c+"_success"]="successMessage"in a?a.successMessage:b.valid):c in m&&(m.addRule(c,a),m.messages[c+"_failed"]=c in b?b[c]:b.notValid,m.messages[c+"_success"]=b.valid,f.$validators[c]=m[c])}function h(){var a=Object.keys(f.$error),b=angular.element("#"+f.$name+"_error_pane");b.empty();for(var c=0;c<a.length;c++)f.$error[a[c]]&&0==b.find("."+a[c]).length&&b.append('<span class="'+a[c]+'"> '+m.messages[a[c]+"_failed"]+"</span>")}function i(a){var b='<div id="'+f.$name+'_error_pane" class="errors"></div>';a.after(b)}var j=d.controller();if(j.rules){var k=f.$name;if(j.rules[k]){var l=j.rules[k];i(d);var m=new a;if("string"==typeof l){if(!l in m)return;f.$validators[l]=m[l],m.messages[l+"_failed"]=l in b?b[l]:b.notValid,m.messages[l+"_success"]=b.valid}else"object"==typeof l&&angular.forEach(l,g);c.$watch(function(){return Object.keys(f.$error).length},h),c.$watch(function(){return f.$modelValue},function(a,b){console.log(a+"<----"+b)})}}}var d={link:c,require:"ngModel"};return d}angular.module("mtng.validator.directives").directive("mtngValidator",a),a.$inject=["MTNGValidatorsProvider","MTNGMessageProvider"]}();